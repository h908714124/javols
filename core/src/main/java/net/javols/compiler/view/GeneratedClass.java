package net.javols.compiler.view;

import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;
import net.javols.compiler.Context;

import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.STATIC;

/**
 * Generates the *_Parser class.
 */
public final class GeneratedClass {

  private static final String PROJECT_URL = "https://github.com/h908714124/javols";

  private final Context context;

  private GeneratedClass(Context context) {
    this.context = context;
  }

  public static GeneratedClass create(Context context) {
    return new GeneratedClass(context);
  }

  public TypeSpec define() {
    TypeSpec.Builder spec = TypeSpec.classBuilder(context.generatedClass());

    spec.addMethod(ParserState.create(context).define())
        .addMethod(missingRequiredMethod());

    spec.addType(Impl.define(context));

    return spec.addModifiers(context.getAccessModifiers())
        .addJavadoc(javadoc()).build();
  }


  private MethodSpec missingRequiredMethod() {
    ParameterSpec key = ParameterSpec.builder(String.class, "key").build();
    return MethodSpec.methodBuilder("missingRequired")
        .addParameter(key)
        .addModifiers(PRIVATE, STATIC)
        .returns(IllegalArgumentException.class)
        .addStatement("return new $T($S + $N)", IllegalArgumentException.class, "Missing required: ", key)
        .build();
  }


  private CodeBlock javadoc() {
    return CodeBlock.builder().add("Generated by <a href=\"" + PROJECT_URL + "\">javols " +
        getClass().getPackage().getImplementationVersion() +
        "</a>\n").build();
  }
}
