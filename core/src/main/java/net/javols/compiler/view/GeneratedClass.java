package net.javols.compiler.view;

import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import net.javols.compiler.Context;
import net.javols.compiler.Parameter;

import java.util.Optional;
import java.util.function.Function;

import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.STATIC;

/**
 * Generates the *_Parser class.
 */
public final class GeneratedClass {

  private static final String PROJECT_URL = "https://github.com/h908714124/javols";

  private final Context context;

  private static final ParameterizedTypeName F = ParameterizedTypeName.get(Function.class, String.class, String.class);

  private final ParameterSpec f = ParameterSpec.builder(F, "f").build();

  private GeneratedClass(Context context) {
    this.context = context;
  }

  public static GeneratedClass create(Context context) {
    return new GeneratedClass(context);
  }

  public TypeSpec define() {
    TypeSpec.Builder spec = TypeSpec.classBuilder(context.generatedClass());

    spec.addMethod(parseMethod())
        .addMethod(missingRequiredMethod())
        .addMethod(MethodSpec.constructorBuilder().addModifiers(PRIVATE).build());

    spec.addType(Impl.define(context));

    return spec.addModifiers(context.getAccessModifiers())
        .addJavadoc(javadoc()).build();
  }

  private MethodSpec parseMethod() {

    CodeBlock.Builder args = CodeBlock.builder().add("\n");
    for (int j = 0; j < context.parameters().size(); j++) {
      Parameter param = context.parameters().get(j);
      args.add(extractExpression(param));
      if (j < context.parameters().size() - 1) {
        args.add(",\n");
      }
    }

    return MethodSpec.methodBuilder("parse")
        .addParameter(f)
        .addStatement("return new $T($L)", context.implType(), args.build())
        .returns(context.sourceType())
        .addModifiers(STATIC)
        .addModifiers(context.getAccessModifiers())
        .build();
  }

  private CodeBlock extractExpression(Parameter param) {
    return CodeBlock.builder().add("$T.ofNullable($N.apply($S))", Optional.class, f, param.key())
        .add(".map($L)", param.coercion().mapExpr())
        .add(collectExpr(param))
        .build();
  }

  private CodeBlock collectExpr(Parameter param) {
    if (!param.isRequired()) {
      return CodeBlock.builder().build();
    }
    return CodeBlock.of(".orElseThrow(() -> missingRequired($S))", param.key());
  }

  private MethodSpec missingRequiredMethod() {
    ParameterSpec key = ParameterSpec.builder(String.class, "key").build();
    return MethodSpec.methodBuilder("missingRequired")
        .addParameter(key)
        .addModifiers(PRIVATE, STATIC)
        .returns(IllegalArgumentException.class)
        .addStatement("return new $T($S + $N + $S)", IllegalArgumentException.class, "Missing required key: <", key, ">")
        .build();
  }

  private CodeBlock javadoc() {
    return CodeBlock.builder().add("Generated by <a href=\"" + PROJECT_URL + "\">javols " +
        getClass().getPackage().getImplementationVersion() +
        "</a>\n").build();
  }
}
